service cloud.firestore {
    match /databases/{database}/documents {

        function loggedIn() {
            return request.auth != null;
        }

        // users
        match /users/{userId} {
            allow read, delete: if request.auth.uid == userId;
        }

        match /users/{userId}/information/personal {
            allow update, read: if request.auth.uid == userId;
        }

        match /users/{userId}/information/privacy {
            allow update, read: if request.auth.uid == userId;
        }

        match /users/conversations/{conversationId} {
            allow read: if request.auth.uid == userId;
        }

        //questions

        match /questions/{questionId} {
            allow read: if true;
        }

        match /questions/{questionId}/conversations/{conversationId}/replies/{replyId} {

            function isPrivacyLevel(level) {
                return get(/databases/$(database)/documents/questions/$(questionId)/conversations/$(conversationId)).data.privacy.view == level;
            }

            function userIsMember() {
                return get(/databases/$(database)/documents/questions/$(questionId)/conversations/$(conversationId)).data.members[request.auth.uid] != null;
            }

            allow read: if isPrivacyLevel(0) || //if the level is 0, everyone is allowed
                (isPrivacyLevel(1) && loggedIn()) || //if the level is 1, logged in people are allowed
                (isPrivacyLevel(2) && false) || //will have to figure this one out
                (isPrivacyLevel(3) && userIsMember()) //if the level is 3, the user must be a member of the conversation

            allow delete: if resource.data.author == request.auth.uid;
        }
    }
}
